El objetivo es ofrecer una experiencia de usuario √≥ptima y consistente en cualquier dispositivo. Para lograrlo, se debe seguir una estrategia estricta y unificada, no basta con "ser responsive".

Principio #1: Mobile First Obligatorio üì±
Todo dise√±o y maquetaci√≥n debe comenzar en la resoluci√≥n m√≥vil m√°s peque√±a soportada (ej. 360px). La adaptaci√≥n a pantallas m√°s grandes se realiza a√±adiendo estilos progresivamente mediante media queries. Esta es una regla obligatoria, ya que nos obliga a:

Priorizar el Contenido: Mostrar solo lo esencial en pantallas peque√±as.

Optimizar el Rendimiento: Cargar primero los recursos y estilos m√°s ligeros.

Escribir CSS M√°s Limpio: Se evita tener que sobrescribir estilos constantemente.

En la pr√°ctica, esto significa que las barras de navegaci√≥n complejas se convierten en un √≠cono de men√∫, los dise√±os de m√∫ltiples columnas se apilan verticalmente, y la funcionalidad secundaria se oculta para no saturar la vista principal.

Principio #2: Layout Fluido y Controlado en Escritorio üñ•Ô∏è
Para mantener una apariencia consistente en pantallas grandes, el contenido no se estirar√° indefinidamente.

Regla: Todo el contenido principal debe estar dentro de un contenedor global que limite su ancho m√°ximo. Usaremos una clase .l-container para este prop√≥sito. Este contenedor tendr√° un ancho porcentual para ser fluido, pero un max-width para mantener la legibilidad.

Ejemplo en CSS puro:

CSS

/* Ruta: /assets/styles/layout/_container.css */

.l-container {
  width: 90%; /* Ocupa el 90% del ancho disponible */
  max-width: 1280px; /* Pero nunca ser√° m√°s ancho de 1280px */
  margin-left: auto; /* Centra el contenedor horizontalmente */ 
  margin-right: auto; /* Centra el contenedor horizontalmente */ 
}
Con esta regla, la web se adapta a cualquier tama√±o de pantalla sin que el contenido se vea desproporcionado.

Principio #3: Puntos de Quiebre (Breakpoints) Unificados
Para asegurar la consistencia, todos los desarrolladores deben usar el mismo conjunto de puntos de quiebre.

Regla: Los breakpoints se definir√°n como Variables CSS (Custom Properties) en el selector :root para que est√©n disponibles globalmente y se usen en todos los media queries.

Definici√≥n de Variables (en un archivo global de CSS):

CSS

/* Ruta: /assets/styles/base/_variables.css */

:root {
  --breakpoint-sm: 576px;  /* Para tablets peque√±as en vertical */
  --breakpoint-md: 768px;  /* Para tablets en horizontal */
  --breakpoint-lg: 992px;  /* Para laptops peque√±as */
  --breakpoint-xl: 1200px;  /* Para pantallas de escritorio */
}
Uso en un Componente:
Se utilizan las variables con la funci√≥n var() dentro de los media queries.

CSS

/* Ejemplo de uso en un componente de tarjeta */
.c-card {
  /* Estilos base (Mobile First) */
  width: 100%;
}

/* Cuando la pantalla sea 768px o m√°s ancha... */
@media (min-width: var(--breakpoint-md)) {
  .c-card {
    width: 50%; /* La tarjeta ocupar√° la mitad del espacio */
  }
}

/* Cuando la pantalla sea 992px o m√°s ancha... */
@media (min-width: var(--breakpoint-lg)) {
  .c-card {
    width: 33.33%; /* Ocupar√° un tercio */ 
  }
}
Esta estrategia asegura que el dise√±o se adapte de una manera predecible, controlada y f√°cil de mantener.







